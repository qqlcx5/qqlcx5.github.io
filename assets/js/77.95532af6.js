(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{461:function(e,v,_){"use strict";_.r(v);var t=_(6),a=Object(t.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"vue父子组件的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue父子组件的生命周期"}},[e._v("#")]),e._v(" Vue父子组件的生命周期")]),e._v(" "),v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),v("p",[e._v("在单个组件中，钩子的执行顺序是"),v("code",[e._v("beforeCreate-> created -> mounted->... ->destroyed")]),e._v("，\n但在多个组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，他们的执行顺序有是怎么样？")]),e._v(" "),v("p",[e._v("了解Vue生命周期钩子，就能更好理解这个问题。")]),e._v(" "),v("h3",{attrs:{id:"vue生命周期做了什么以及能做什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期做了什么以及能做什么"}},[e._v("#")]),e._v(" Vue生命周期做了什么以及能做什么")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("beforeCreate")]),e._v("执行时："),v("code",[e._v("data")]),e._v("和"),v("code",[e._v("el")]),e._v("均未初始化，值为"),v("code",[e._v("undefined")]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("created")]),e._v("执行时："),v("code",[e._v("Vue")]),e._v(" 实例观察的数据对象"),v("code",[e._v("data")]),e._v("初始化，此时可以得到"),v("code",[e._v("data")]),e._v("的值，但"),v("code",[e._v("Vue")]),e._v(" 实例使用的根 "),v("code",[e._v("DOM")]),e._v(" 元素el还未初始化。")]),e._v(" "),v("li",[v("code",[e._v("beforeMount")]),e._v(" 执行时："),v("code",[e._v("data")]),e._v("和"),v("code",[e._v("el")]),e._v("均已经初始化，但此时"),v("code",[e._v("el")]),e._v("并没有渲染进数据，"),v("code",[e._v("el")]),e._v("的值为“虚拟”的元素节点。")]),e._v(" "),v("li",[v("code",[e._v("mounted")]),e._v(" 执行时：此时"),v("code",[e._v("el")]),e._v("已经渲染完成并挂载到实例上")]),e._v(" "),v("li",[v("code",[e._v("beforeUpdate")]),e._v("和"),v("code",[e._v("updated")]),e._v("触发时，"),v("code",[e._v("el")]),e._v("中的数据都已经渲染完成，但只有"),v("code",[e._v("updated")]),e._v("钩子被调用时候，组件"),v("code",[e._v("dom")]),e._v("才被更新。")]),e._v(" "),v("li",[e._v("在"),v("code",[e._v("created")]),e._v("钩子中可以对"),v("code",[e._v("data")]),e._v("数据进行操作，这个时候可以进行数据请求将返回的数据赋给"),v("code",[e._v("data")])]),e._v(" "),v("li",[e._v("在"),v("code",[e._v("mounted")]),e._v("钩子对挂载的"),v("code",[e._v("dom")]),e._v("进行操作，此时，"),v("code",[e._v("DOM")]),e._v("已经被渲染到页面上。")]),e._v(" "),v("li",[e._v("虽然"),v("code",[e._v("updated")]),e._v("函数会在数据变化时被触发，但却不能准确的判断是那个属性值被改变，所以在实际情况中用"),v("code",[e._v("computed")]),e._v("或"),v("code",[e._v("watch")]),e._v("函数来监听属性的变化，并做一些其他的操作。")]),e._v(" "),v("li",[e._v("所有的生命周期钩子自动绑定 "),v("code",[e._v("this")]),e._v(" 上下文到实例中，所以不能使用箭头函数来定义一个生命周期方法 (例如 "),v("code",[e._v("created: () => this.- fetchTodos())")]),e._v(",会导致"),v("code",[e._v("this")]),e._v("指向父级。")]),e._v(" "),v("li",[e._v("父子组件的钩子并不会等待请求返回，请求是异步的，VUE设计也不能因为请求没有响应而不执行后面的钩子。所以，我们必须通过"),v("code",[e._v("v-if")]),e._v("来控制子组件钩子的执行时机。")]),e._v(" "),v("li",[e._v("在使用"),v("code",[e._v("vue-router")]),e._v("时有时需要使用来缓存组件状态，这个时候"),v("code",[e._v("created")]),e._v("钩子就不会被重复调用了，如果我们的子组件需要在每次加载或切换状态的时候进行某些操作，可以使用"),v("code",[e._v("activated")]),e._v("钩子触发。")])]),e._v(" "),v("blockquote",[v("p",[e._v("activated, deactivated 是组件keep-alive时独有的钩子")])]),e._v(" "),v("p",[e._v("所以父组件会先执行到"),v("code",[e._v("beforeMount")]),e._v("，接着会执行子组件钩子到挂载结束，再挂载父组件。")]),e._v(" "),v("p",[v("strong",[e._v("Vue父子组件渲染过程")])]),e._v(" "),v("div",{staticClass:"language-vue extra-class"},[v("pre",{pre:!0,attrs:{class:"language-vue"}},[v("code",[e._v("父beforeCreate -> 父created-> 父beforeMount -> \n子beforeCreate -> 子created -> 子beforeMount -> 子mounted->\n父mounted\n")])])]),v("p",[v("strong",[e._v("子组件更新过程")])]),e._v(" "),v("div",{staticClass:"language-vue extra-class"},[v("pre",{pre:!0,attrs:{class:"language-vue"}},[v("code",[e._v("父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n")])])]),v("p",[v("strong",[e._v("父组件更新过程")])]),e._v(" "),v("div",{staticClass:"language-vue extra-class"},[v("pre",{pre:!0,attrs:{class:"language-vue"}},[v("code",[e._v("父beforeUpdate -> 父updated\n")])])]),v("p",[v("strong",[e._v("销毁过程")])]),e._v(" "),v("div",{staticClass:"language-vue extra-class"},[v("pre",{pre:!0,attrs:{class:"language-vue"}},[v("code",[e._v("父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);