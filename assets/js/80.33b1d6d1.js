(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{464:function(e,a,s){"use strict";s.r(a);var t=s(6),n=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("本文可以分为三个部分：")]),e._v(" "),a("ul",[a("li",[e._v("第一部分：主要简述 了解 webpack 零配置 demo")]),e._v(" "),a("li",[e._v("第二部分：主要简述 了解 webpack 配置基本概念")]),e._v(" "),a("li",[e._v("第三部分：主要简述 了解常见一些插件和 loader 使用")])]),e._v(" "),a("h2",{attrs:{id:"什么是-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-webpack"}},[e._v("#")]),e._v(" 什么是 Webpack")]),e._v(" "),a("p",[e._v("webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。可以看做是模块打包机。\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/31/169cf62863c9bcdb?w=800&h=316&f=png&s=83221",alt:"clipboard.png"}}),e._v("\n例如上图所示，它做的事情是，分析你的项目结构，找到 JavaScript 模块以及解析其他拓展语言（Scss，TypeScript 等），并将其打包浏览器能够解析的语言使用。")]),e._v(" "),a("h2",{attrs:{id:"webpack-构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-构建"}},[e._v("#")]),e._v(" webpack 构建")]),e._v(" "),a("p",[e._v("构建就是把源代码转换成发布到线上的可执行 JavaScrip、CSS、HTML 代码，包括如下内容：")]),e._v(" "),a("ul",[a("li",[e._v("代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。")]),e._v(" "),a("li",[e._v("文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。")]),e._v(" "),a("li",[e._v("代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。")]),e._v(" "),a("li",[e._v("模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。")]),e._v(" "),a("li",[e._v("自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。")]),e._v(" "),a("li",[e._v("代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。")]),e._v(" "),a("li",[e._v("自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。")])]),e._v(" "),a("p",[e._v("构建其实是工程化、自动化思想在前端开发中的体现，把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。 构建给前端开发注入了更大的活力，解放了我们的生产力。")]),e._v(" "),a("h2",{attrs:{id:"webpack-基础使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-基础使用"}},[e._v("#")]),e._v(" webpack 基础使用")]),e._v(" "),a("h3",{attrs:{id:"初始化项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目"}},[e._v("#")]),e._v(" 初始化项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mkdir wp // 创建文件夹\ncd wp\nnpm init -y // 初始化项目\n")])])]),a("p",[e._v("初始化项目后会生成"),a("code",[e._v("package.json")]),e._v("文件，我们再里面添加一个"),a("code",[e._v("scripts：[]")]),e._v("语句，如下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n{\n  "name": "wp",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "dev": "webpack-dev-server --inline --progress --config webpack.config.js",//运行到开发环境\n    "build": "webpack --mode production" //进行打包\n  },\n  "dependencies": {},\n  "devDependencies": {},\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n')])])]),a("h3",{attrs:{id:"安装和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装和使用"}},[e._v("#")]),e._v(" 安装和使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install webpack webpack-cli -g\n// OR\nyarn global  add webpack webpack-cli\n")])])]),a("p",[a("code",[e._v("webpack-cli")]),e._v(" 是使用 "),a("code",[e._v("webpack")]),e._v(" 的命令行工具，在 4.x 版本之后，webpack 启动命令行的代码放入了"),a("code",[e._v("webpack-cli")]),e._v(" 中。如果只安装了 webpack，只能在 nodejs 环境中使用，就不能在命令行中使用。")]),e._v(" "),a("p",[e._v("我们在 src 文件夹下创建 "),a("code",[e._v("index.js")]),e._v("和"),a("code",[e._v("test.js")]),e._v(" 文件")]),e._v(" "),a("p",[a("code",[e._v("./src/test.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = '我的wepback_module_test文件'\n")])])]),a("p",[a("code",[e._v("./src/index.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const stra = require('./test.js')\nconsole.log(stra)\n")])])]),a("p",[e._v("保存之后在命令行工具执行 "),a("code",[e._v("npx webpack")]),e._v(" 或 "),a("code",[e._v("npm run build")]),e._v(" 命令，你就会发现新增了一个 dist 目录，里边存放的是 webpack 构建好的 main.js 文件。")]),e._v(" "),a("p",[e._v("此时 main.js 文件就是我们打包后的文件，我们创建一个 HTML 文件引入这个 main.js，然后在浏览器打开，就可以在控制台就能看到"),a("code",[e._v("我的wepback_module_test文件")]),e._v("被打印出来。")]),e._v(" "),a("p",[a("strong",[e._v("npx 说明")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1. npm 5.2.0 以上版本中内置的命令：npx，类似于 npm 简化了项目开发中的依赖安装与管理\n2. npx 会自动查找当前依赖包中的可执行文件\n\n@IF EXIST "%~dp0\\node.exe" (\n"%~dp0\\node.exe" "%~dp0\\..\\webpack-cli\\bin\\cli.js" %*\n) ELSE (\n@SETLOCAL\n@SET PATHEXT=%PATHEXT:;.JS;=;%\nnode "%~dp0\\..\\webpack-cli\\bin\\cli.js" %*\n)\n查看从上面的源码，得到npx webpack命令其实\n就是执行`node_modules\\.bin\\webpack-cli.cmd`路径下文件\n')])])]),a("p",[e._v("上述就是 webpack4.x 零配置简单 demo。")]),e._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点：")]),e._v(" "),a("p",[e._v("零配置的 webpack 缺少很多实际项目需要的功能，所以你还是需要一个配置文件，来完善 webpack 功能。在当前目录下新建一个"),a("code",[e._v("webpack.config.js")]),e._v("的文件，webpack 运行时默认读取当前项目下的 webpack.config.js 文件作为配置。如果需要运行指定文件名称例："),a("code",[e._v("webpack.config.dev.js")]),e._v(" 需要在命令行运行以下代码来声明以此文件作为配置文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npx webpack --config webpack.config.dev.js\n")])])]),a("h3",{attrs:{id:"了解-webpack-配置基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解-webpack-配置基本概念"}},[e._v("#")]),e._v(" 了解 webpack 配置基本概念")]),e._v(" "),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const path=require('path');\nmodule.exports={\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname,'dist'),\n        filename:'bundle.js'\n    },\n    module: {},\n    plugins: [],\n    devServer: {}\n}\n")])])]),a("p",[e._v("从上面的"),a("code",[e._v("webpack.config.js")]),e._v("配置文件看到，webpack 配置由以下几部分组成。")]),e._v(" "),a("ul",[a("li",[e._v("Entry：入口， webpack 会读取这个文件，解析其中依赖。")]),e._v(" "),a("li",[e._v("Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。")]),e._v(" "),a("li",[e._v("Chunk：代码块，用于代码合并与分割，常用在配置多入口页面使用。")]),e._v(" "),a("li",[e._v("Loader：模块转换器，解析拓展语言（less,TypeScript）转换成浏览器能解析语言。")]),e._v(" "),a("li",[e._v("Plugin：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果。")]),e._v(" "),a("li",[e._v("Output：输出结果，在 Webpack 经过一系列打包处理并得出最终代码文件。")])]),e._v(" "),a("p",[e._v("我们可以把 wepback 看作成一个食品加工厂，Entry 就是食品原材料，Output 就是加工后的产品，\nModule 就是生产的流程图，Loader 就是识别原材料是什么，然后进行解析加工。Plugin 就是 Loader 增强版可以执行 Loader 不能实现复杂的操作。")]),e._v(" "),a("h3",{attrs:{id:"入口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入口"}},[e._v("#")]),e._v(" 入口")]),e._v(" "),a("p",[e._v("webpack 构建时 会读取这个文件，并从它开始解析其中各种依赖，然后进行打包 bundle 的文件中。\n可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。默认值为 ./src。")]),e._v(" "),a("p",[e._v("接下来我们看一个 entry 配置的简单例子：")]),e._v(" "),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  entry: './src/index.js'\n};\n// 等同于\nmodule.exports = {\n  entry: {\n    index: './src/index.js'\n  }\n}\n// 或者配置多个入口\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    login: './src/login.js',\n    // ...\n  }\n}\n")])])]),a("h3",{attrs:{id:"出口-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#出口-output"}},[e._v("#")]),e._v(" 出口(output)")]),e._v(" "),a("p",[e._v("告诉 webpack 在哪里输出打包后的 bundles，以及如何命名这些文件，默认值为 ./dist。\n基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中指定一个 output 字段，来配置这些处理过程：")]),e._v(" "),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n};\n// 或者多个入口生成不同文件\nmodule.exports = {\n  entry: {\n    index: './src/index.js',\n    login: './src/login.js',\n    // ...\n  },\n  output: {\n    filename: '[name].[hash:8].js', // filename 输出包的名称，hash 哈希值前8位\n    path: __dirname + '/dist', //__dirname当前目录下\n  },\n}\n\n")])])]),a("p",[a("code",[e._v("path")]),e._v("模块用于处理文件和目录路径，"),a("code",[e._v("path")]),e._v("模块可以将将绝对路径处理成相对路径。")]),e._v(" "),a("h3",{attrs:{id:"loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" loader")]),e._v(" "),a("p",[e._v("webpack 只能理解 JavaScript 和 JSON 文件。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。")]),e._v(" "),a("ul",[a("li",[e._v("test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。")]),e._v(" "),a("li",[e._v("use 属性，表示进行转换时，应该使用哪个 loader。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module: {\n  rules: [\n    {\n      test: /\\.jsx?/, // 匹配文件路径的正则表达式\n      include: [    //include 手动指定必须处理的文件夹，相反exclude屏蔽不需要处理的文件夹\n        path.resolve(__dirname, 'src') // 指定当前src路径下的文件需要经过 loader 处理\n      ],\n      use: 'babel-loader', // 指定使用的 loader\n    },\n  ],\n}\n")])])]),a("h3",{attrs:{id:"插件-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件-plugin"}},[e._v("#")]),e._v(" 插件(plugin)")]),e._v(" "),a("p",[e._v("loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。")]),e._v(" "),a("p",[a("strong",[e._v("插件接口(plugin interface) 功能极其强大，可以用来处理各种各样的任务。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    plugins: [\n        new htmlWebpackPlugin({\n            template: "index.html", // 把index文件作为模板\n            filename: "index.html", // 打包后的文件名称\n            hash: true,\n            minify: {\n                removeAttributeQuotes: true, //去除 html的双引号\n                collapseWhitespace: true //将html代码压缩成一行\n            }\n        })\n    ]\n')])])]),a("h3",{attrs:{id:"模式-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式-mode"}},[e._v("#")]),e._v(" 模式(mode)")]),e._v(" "),a("p",[e._v("通过选择 "),a("code",[e._v("development")]),e._v(", "),a("code",[e._v("production")]),e._v(" 来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  mode: 'production'\n};\n")])])]),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let path = require('path');\nlet htmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  mode: 'production', //development 或 production\n  entry: {\n    index: './src/index.js', //入口文件\n  },\n  output: {\n    filename: \"[name].[hash:8].js\", //出口文件\n    path: path.resolve(__dirname, 'dist'), //__dirname当前目录, ,../,上级目录\n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      template: 'index.html', // 把index文件作为模板\n      filename: 'index.html', //打包后的文件名\n      minify: {\n        removeAttributeQuotes: true, //去除 html的双引号\n        collapseWhitespace: true //压缩成一行\n      }\n    })\n  ]\n}\n\n")])])]),a("p",[e._v("上述我们对 webpack 配置有了一定了解，接下来我们来学习搭建基本的前端开发环境吧！")]),e._v(" "),a("h2",{attrs:{id:"了解常见一些插件和-loader-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解常见一些插件和-loader-使用"}},[e._v("#")]),e._v(" 了解常见一些插件和 loader 使用")]),e._v(" "),a("h3",{attrs:{id:"关联-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联-html"}},[e._v("#")]),e._v(" 关联 HTML")]),e._v(" "),a("p",[e._v("webpack 默认从作为入口的 .js 文件进行构建，但通常一个前端项目都是从一个页面（即 HTML）出发的，最简单的方法是，创建一个 HTML 文件，使用 script 标签直接引用构建好的 JS 文件，如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8">\n    <title>webpack App</title>\n  </head>\n  <body>\n    <script src="./dist/bundle.js"><\/script>\n  </body>\n</html>\n')])])]),a("p",[e._v("但是对于在文件名中包含每次会随着编译而发生变化哈希的 webpack bundle，我们可以用"),a("code",[e._v("HtmlWebpackPlugin")]),e._v("插件简化了 HTML 文件的创建，关联打包后的"),a("code",[e._v("bundle.xxx.js")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install html-webpack-plugin -D\n// OR\nyarn add html-webpack-plugin -D\n")])])]),a("h4",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("p",[e._v("将 "),a("code",[e._v("html-webpack-plugin")]),e._v(" 添加到 "),a("code",[e._v("plugins")]),e._v(" 列表中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const HtmlWebpackPlugin = require('html-webpack-plugin');\nconst path = require('path');\nmodule.exports = {\n  // ...\n output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.[hash:8].js'\n  },\n plugins: [\n        new HtmlWebpackPlugin({\n         minify: {\n            removeAttributeQuotes:true\n        },\n        template: './index.html',\n        filename:'index.html'\n    })]\n}\n")])])]),a("ul",[a("li",[a("code",[e._v("minify")]),e._v(" 是对 html 文件进行压缩，"),a("code",[e._v("removeAttrubuteQuotes")]),e._v("是去掉属性的双引号")]),e._v(" "),a("li",[a("code",[e._v("hash")]),e._v(" 引入产出资源的时候加上查询参数，值为哈希避免缓存")]),e._v(" "),a("li",[a("code",[e._v("template")]),e._v(" 把当前目录下"),a("code",[e._v("index.html")]),e._v("作为模板")]),e._v(" "),a("li",[a("code",[e._v("filename")]),e._v(" 打包后产出的文件名")])]),e._v(" "),a("p",[e._v("这将会产生一个包含以下内容的文件 "),a("code",[e._v("dist/index.html")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8">\n    <title>webpack App</title>\n  </head>\n  <body>\n    <script src="src=index.7f7a3d17.js"><\/script>\n  </body>\n</html>\n')])])]),a("p",[e._v("这样配置好之后，通过 html-webpack-plugin 就可以将我们的页面和构建 JS 关联起来，从页面开始开发。")]),e._v(" "),a("h3",{attrs:{id:"配置开发服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置开发服务器"}},[e._v("#")]),e._v(" 配置开发服务器")]),e._v(" "),a("p",[a("code",[e._v("webpack-dev-server")]),e._v(" 为你提供了一个简单的静态服务来进行开发。")]),e._v(" "),a("h4",{attrs:{id:"安装-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install webpack-dev-server –D\n// OR\nyarn add webpack-dev-server –D\n")])])]),a("h4",{attrs:{id:"基本用法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法-2"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('module.exports = {\n    mode: "development", //development 或 production\n    devServer: {\n        contentBase: path.join("dist"), //告诉服务器从哪里提供内容\n        compress: true, //为所服务的一切启用gzip压缩\n        port: 9000  //本地服务器端口号\n    }\n')])])]),a("p",[e._v("然后我们可以在"),a("code",[e._v("package.json")]),e._v("添加直接运行 "),a("code",[e._v("dev server")]),e._v(" 的 "),a("code",[e._v("script：")])]),e._v(" "),a("p",[a("strong",[e._v("package.json")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "name": "wp",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n     "dev": "webpack-dev-server --inline --progress --config webpack.config.js",\n     "build": "webpack --mode production"\n  },\n  "dependencies": {},\n  "devDependencies": {},\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n')])])]),a("p",[e._v("其实"),a("code",[e._v("npm init -y")]),e._v("时候，我就添加"),a("code",[e._v('"scripts"')]),e._v("中，在这顺便在提醒一下。")]),e._v(" "),a("p",[e._v("接下来尝试着运行 "),a("code",[e._v("npm run dev")]),e._v(" 或者 "),a("code",[e._v("yarn dev")]),e._v("，然后就可以访问 "),a("code",[e._v("http://localhost:9000/")]),e._v(" 来查看你的页面了。")]),e._v(" "),a("p",[e._v("默认是访问 "),a("code",[e._v("index.html")]),e._v("，如果是其他页面要注意访问的 URL 是否正确。")]),e._v(" "),a("h3",{attrs:{id:"支持加载-css-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持加载-css-文件"}},[e._v("#")]),e._v(" 支持加载 css 文件")]),e._v(" "),a("p",[e._v("上述说过 webpack 不支持 CSS 代码，所以我们需要 loader，让 webpack 能解析处理 CSS 代码。")]),e._v(" "),a("p",[a("strong",[e._v("Loader")])]),e._v(" "),a("p",[e._v("通过使用不同的 Loader，Webpack 可以要把不同的文件都转成 JS 文件，比如 CSS、ES6/7、JSX 等")]),e._v(" "),a("ul",[a("li",[e._v("test：匹配处理文件的扩展名的正则表达式")]),e._v(" "),a("li",[e._v("use：loader 名称，就是你要使用模块的名称")]),e._v(" "),a("li",[e._v("include/exclude:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹")])]),e._v(" "),a("p",[e._v("我们需要安装两个 loader")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install css-loader style-loader –D\n// OR\nyarn add css-loader style-loader –D\n")])])]),a("ul",[a("li",[e._v("css-loader 负责解析 CSS 代码，主要是为了处理 CSS 中的依赖，例如 @import 和 url() 等引用外部文件的声明；")]),e._v(" "),a("li",[e._v("style-loader 会将 css-loader 解析的结果转变成 JS 代码，运行时动态插入 style 标签来让 CSS 代码生效。")])]),e._v(" "),a("p",[e._v("接下来在"),a("code",[e._v("webpack.config.js")]),e._v("添加规则")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module: {\n        rules: [\n            {\n                test: /\\.css/,\n                include: path.resolve(__dirname,'src'),\n                exclude: /node_modules/,\n                use:['style-loader','css-loader']\n            }\n        ]\n    }\n")])])]),a("p",[e._v("我们在 src 下创建一个 index.css 文件，随便添加一些样式，并在 index.js 中引用它，然后进行打包。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import "./index.css";\nOR\nrequire("./index.css");\n')])])]),a("p",[e._v("打包后你会发现引入的 index.css 在浏览器中能正常使用了。")]),e._v(" "),a("h3",{attrs:{id:"分离-css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分离-css"}},[e._v("#")]),e._v(" 分离 CSS")]),e._v(" "),a("p",[e._v("先简单解释一下为何要把 CSS 文件分离出来，而不是直接一起打包在 JS 中。最主要的原因是我们希望更好地利用缓存。")]),e._v(" "),a("p",[e._v("假设我们原本页面的静态资源都打包成一个 JS 文件，加载页面时虽然只需要加载一个 JS 文件，但是我们的代码一旦改变了，用户访问新的页面时就需要重新加载一个新的 JS 文件。有些情况下，我们只是单独修改了样式，这样也要重新加载整个应用的 JS 文件，相当不划算。")]),e._v(" "),a("p",[e._v("还有一种情况是我们有多个页面，它们都可以共用一部分样式（这是很常见的，CSS Reset、基础组件样式等基本都是跨页面通用），如果每个页面都单独打包一个 JS 文件，那么每次访问页面都会重复加载原本可以共享的那些 CSS 代码。如果分离开来，第二个页面就有了 CSS 文件的缓存，访问速度自然会加快。虽然对第一个页面来说多了一个请求，但是对随后的页面来说，缓存带来的速度提升相对更加可观。")]),e._v(" "),a("p",[e._v("因此当我们考虑更好地利用缓存来加速静态资源访问时，会尝试把一些公共资源单独分离开来，利用缓存加速，以避免重复的加载。除了公共的 CSS 文件或者图片资源等，当我们的 JS 代码文件过大的时候，也可以用代码文件拆分的办法来进行优化。")]),e._v(" "),a("p",[e._v("因为 CSS 的下载和 JS 可以并行，当一个 HTML 文件很大的时候，我们可以把 CSS 单独提取出来加载。这时我们就需要"),a("code",[e._v("MiniCssExtractPlugin")]),e._v("插件来实现这功能。")]),e._v(" "),a("h4",{attrs:{id:"兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容性"}},[e._v("#")]),e._v(" 兼容性")]),e._v(" "),a("p",[a("code",[e._v("MiniCssExtractPlugin")]),e._v("建立在新的 webpack 4x 功能（模块类型）之上，并且需要 webpack 4 才能工作。")]),e._v(" "),a("p",[e._v("好在 webpack 5 已经内置了"),a("code",[e._v("CSS minimizer")]),e._v(" 和 "),a("code",[e._v("JS minimizer")])]),e._v(" "),a("p",[a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install  mini-css-extract-plugin --save-dev\nOR\nyarn add mini-css-extract-plugin --save-dev\n")])])]),a("h4",{attrs:{id:"基本用法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法-3"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),a("p",[a("code",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  // ...\n   module: {\n   rules: [\n            {\n                test: /\\.css$/,\n                include: path.resolve(__dirname,'src'),\n                exclude: /node_modules/,\n                use: ['style-loader',{ loader: MiniCssExtractPlugin.loader },'css-loader']\n            }\n        ]\n----\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: \"css/style.css\"\n        })\n    ]\n")])])]),a("p",[e._v("这样配置好之后，通过 "),a("code",[e._v("MiniCssExtractPlugin")]),e._v("会自动 将引入 js 的 CSS 代码分离生成 css/style.css 的文件，然后"),a("code",[e._v("link")]),e._v("标签的形式自动引入到构建"),a("code",[e._v("index.html")]),e._v("中。")]),e._v(" "),a("h3",{attrs:{id:"自动添加-css3-属性前缀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动添加-css3-属性前缀"}},[e._v("#")]),e._v(" 自动添加 CSS3 属性前缀")]),e._v(" "),a("p",[e._v("为了浏览器的兼容性，有时候我们必须加入"),a("code",[e._v("-webkit")]),e._v(","),a("code",[e._v("-ms")]),e._v(","),a("code",[e._v("-o")]),e._v(","),a("code",[e._v("-moz")]),e._v("这些前缀")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Trident")]),e._v("内核：主要代表为 IE 浏览器, 前缀为-ms")]),e._v(" "),a("li",[a("code",[e._v("Gecko")]),e._v("内核：主要代表为 Firefox, 前缀为-moz")]),e._v(" "),a("li",[a("code",[e._v("Presto")]),e._v("内核：主要代表为 Opera, 前缀为-o")]),e._v(" "),a("li",[a("code",[e._v("Webkit")]),e._v("内核：产要代表为 Chrome 和 Safari, 前缀为-webkit")])]),e._v(" "),a("p",[a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" npm install postcss-loader autoprefixer --save-dev\n OR\n yarn add postcss-loader autoprefixer --save-dev\n")])])]),a("p",[e._v("在"),a("code",[e._v("webpack.config.js")]),e._v("同级目录下新建"),a("code",[e._v("postcss.config.js")]),e._v("文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports={\n    plugins:[require('autoprefixer')]\n}\n")])])]),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  // ...\n   module: {\n   rules: [\n            {\n                test: /\\.css$/,\n                include: path.resolve(__dirname,'src'),\n                exclude: /node_modules/,\n                use: ['style-loader',{ loader: MiniCssExtractPlugin.loader },'css-loader','postcss-loader']\n            }\n          ]\n")])])]),a("h3",{attrs:{id:"效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#效果"}},[e._v("#")]),e._v(" 效果")]),e._v(" "),a("p",[a("strong",[e._v("初始 CSS")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("body {\n  transform: rotateY(180deg);\n  background-color: antiquewhite;\n}\n")])])]),a("p",[a("strong",[e._v("转换后")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("body {\n  -webkit-transform: rotateY(180deg);\n          transform: rotateY(180deg);\n  background-color: antiquewhite;\n}\n")])])]),a("h3",{attrs:{id:"压缩-js-和-css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩-js-和-css"}},[e._v("#")]),e._v(" 压缩 JS 和 CSS")]),e._v(" "),a("p",[a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin --save\nOR\nyarn add uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin --save\n")])])]),a("p",[a("strong",[e._v("配置 webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let UglifyJsPlugin = require("uglifyjs-webpack-plugin");\nlet OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin");\nmodule.exports = {\n    mode: \'production\',\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                cache: true,//启动缓存\n                parallel: true//启动并行压缩\n            }),\n            //压缩css资源的\n            new OptimizeCSSAssetsPlugin({})\n        ]\n    },\n')])])]),a("p",[a("strong",[e._v("转换后效果")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('body{-webkit-transform:rotateY(180deg);transform:rotateY(180deg);background-color:#faebd7}body h3{color:#bdb76b}\n!function(t){var r={};function o(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=r,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,t){new function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),alert("class")};t(1)},function(e,n,t){}]);\n')])])]),a("h3",{attrs:{id:"css-预处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-预处理器"}},[e._v("#")]),e._v(" CSS 预处理器")]),e._v(" "),a("p",[a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm isntall less less-loader --save-dev //less\nnpm isntall node-sass sass-loader --save-dev //sass\nnpm isntall stylus stylus-loader --save-dev //stylus\nOR\nyarn add less less-loader --save-dev //less\nyarn add node-sass sass-loader --save-dev //sass\nyarn add stylus stylus-loader --save-dev //stylus\n")])])]),a("p",[a("strong",[e._v("配置 webpack.config.js")])]),e._v(" "),a("p",[e._v("以"),a("code",[e._v("less")]),e._v("为例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  // ...\n  module: {\n    rules: [\n       {\n        test: /\\.less/,\n        include: path.resolve(__dirname,'src'),\n        exclude: /node_modules/,\n        use: [{\n            loader: MiniCssExtractPlugin.loader,\n        },'css-loader','less-loader']\n    }],\n  }\n}\n")])])]),a("p",[a("strong",[e._v("初始 Less")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@nice-blue: #5B83AD;\n@light-blue: @nice-blue + #111;\n\n#header {\n  color: @light-blue;\n}\n\n")])])]),a("p",[a("strong",[e._v("输出")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#header {\n  color: #6c94be;\n}\n")])])]),a("h3",{attrs:{id:"支持图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持图片"}},[e._v("#")]),e._v(" 支持图片")]),e._v(" "),a("p",[a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm isntall file-loader url-loader -D\nOR\nyarn add file-loader url-loader -D\n")])])]),a("p",[a("strong",[e._v("说明")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("file-loader")]),e._v(" 解决 CSS 等文件中的引入图片路径问题")]),e._v(" "),a("li",[a("code",[e._v("url-loader")]),e._v(" 当图片小于 limit 的时候会把图片 BASE64 编码，大于 limit 参数的时候还是使用 file-loader 进行拷贝")])]),e._v(" "),a("p",[a("strong",[e._v("情况一：JS 中引入图片")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let logo=require('./images/logo.png');\nlet img=new Image();\nimg.src=logo;\ndocument.body.appendChild(img);\n")])])]),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  test:/\\.(jpg|png|bmp|gif|svg|ttf|woff|woff2|eot)/,\n    use:[\n    {\n       loader:'url-loader',\n       options:{limit:4096}\n    }\n  ]\n}\n")])])]),a("p",[a("strong",[e._v("情况二：CSS 中引入图片")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".logo{\n    width:355px;\n    height:133px;\n    background-image: url(./images/logo.png);\n    background-size: cover;\n}\n")])])]),a("p",[a("strong",[e._v("HTML")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div class="logo"></div>\n')])])]),a("h3",{attrs:{id:"对图片进行压缩和优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对图片进行压缩和优化"}},[e._v("#")]),e._v(" 对图片进行压缩和优化")]),e._v(" "),a("p",[a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install image-webpack-loader --save-dev\nOR\nyarn add image-webpack-loader --save-dev\n")])])]),a("p",[a("strong",[e._v("基本用法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("rules: [{\n  test: /\\.(gif|png|jpe?g|svg)$/i,\n  use: [\n    'file-loader',\n    {\n      loader: 'image-webpack-loader',\n      options: {\n        mozjpeg: {\n          progressive: true,\n          quality: 65\n        },\n        // optipng.enabled: false will disable optipng\n        optipng: {\n          enabled: false,\n        },\n        pngquant: {\n          quality: '65-90',\n          speed: 4\n        },\n        gifsicle: {\n          interlaced: false,\n        },\n        // the webp option will enable WEBP\n        webp: {\n          quality: 75\n        }\n      }\n    },\n  ],\n}]\n")])])]),a("h3",{attrs:{id:"转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义"}},[e._v("#")]),e._v(" 转义")]),e._v(" "),a("p",[e._v("Babel 主要用于将 ES6/ES7/JSX 的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。\n"),a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm isntall babel-loader @babel/core @babel/preset-env  --save-dev\nOR\nyarn add babel-loader @babel/core @babel/preset-env --save-dev\n")])])]),a("p",[e._v("在"),a("code",[e._v("webpack.config.js")]),e._v("目录下新建"),a("code",[e._v(".babelrc")]),e._v("文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "presets": [\n    "@babel/preset-env"\n  ]\n}\n')])])]),a("p",[a("strong",[e._v("webpack.config.js")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.js?$/,\n        include: [\n          path.resolve(__dirname, 'src'), // src 目录下的才需要经过 babel-loader 处理\n        ],\n        loader: 'babel-loader',\n      },\n    ],\n  },\n}\n")])])]),a("p",[e._v("在"),a("code",[e._v("index.js")]),e._v("入口文件添加以下代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('class My {\n    constructor() {\n    console.log("class my");\n    }\n}\nlet my = new My();\n\n')])])]),a("p",[e._v("命令行输入"),a("code",[e._v("npm run dev")]),e._v(" 或 "),a("code",[e._v("yarn dev")]),e._v("，在浏览器打开，可见控制台"),a("code",[e._v("class my")]),e._v("被打印出来。")]),e._v(" "),a("p",[a("strong",[e._v("babel-loader 缺陷")])]),e._v(" "),a("p",[e._v("Babel 对一些公共方法使用了非常小的辅助代码，比如 "),a("code",[e._v("_extend")]),e._v("。默认情况下会被添加到每一个需要它的文件中\n你可以引入 Babel runtime 作为一个独立模块，来避免重复引入。\n"),a("strong",[e._v("安装依赖模块")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install  @babel/plugin-transform-runtime --save-dev\nnpm install  @babel/runtime --save\nOR\nyarn add  @babel/plugin-transform-runtime --save-dev\nyarn add install  @babel/runtime --save\n")])])]),a("p",[a("strong",[e._v("修改"),a("code",[e._v(".babelrc")]),e._v("文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "presets": ["@babel/preset-env"],\n  "plugins": [\n   [\n         "@babel/plugin-transform-runtime"\n    ]\n  ]\n}\n')])])]),a("p",[a("code",[e._v("webpack")]),e._v("打包的时候，会自动优化重复引入公共方法的问题。")]),e._v(" "),a("h3",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[e._v("#")]),e._v(" 参考文档")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://webpack.docschina.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack 官网"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/book/6844733709808041992",target:"_blank",rel:"noopener noreferrer"}},[e._v("用 webpack 定制前端开发环境"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);